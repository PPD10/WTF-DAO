package com.wtf.dao;

import java.util.ArrayList;
import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.wtf.models.Level;
import com.wtf.models.LevelPlayer;
import com.wtf.models.Player;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LEVEL_PLAYER.
*/
public class LevelPlayerDao extends AbstractDao<LevelPlayer, Void> {

    public static final String TABLENAME = "LEVEL_PLAYER";

    /**
     * Properties of entity LevelPlayer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LevelId = new Property(0, long.class, "levelId", false, "LEVEL_ID");
        public final static Property PlayerId = new Property(1, long.class, "playerId", false, "PLAYER_ID");
    };

    private DaoSession daoSession;

    private Query<LevelPlayer> level_LevelPlayerListQuery;
    private Query<LevelPlayer> player_LevelPlayerListQuery;

    public LevelPlayerDao(DaoConfig config) {
        super(config);
    }
    
    public LevelPlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LEVEL_PLAYER' (" + //
                "'LEVEL_ID' INTEGER NOT NULL ," + // 0: levelId
                "'PLAYER_ID' INTEGER NOT NULL );"); // 1: playerId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LEVEL_PLAYER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LevelPlayer entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getLevelId());
        stmt.bindLong(2, entity.getPlayerId());
    }

    @Override
    protected void attachEntity(LevelPlayer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LevelPlayer readEntity(Cursor cursor, int offset) {
        LevelPlayer entity = new LevelPlayer( //
            cursor.getLong(offset + 0), // levelId
            cursor.getLong(offset + 1) // playerId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LevelPlayer entity, int offset) {
        entity.setLevelId(cursor.getLong(offset + 0));
        entity.setPlayerId(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LevelPlayer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LevelPlayer entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "levelPlayerList" to-many relationship of Level. */
    public List<LevelPlayer> _queryLevel_LevelPlayerList(long levelId) {
        synchronized (this) {
            if (level_LevelPlayerListQuery == null) {
                QueryBuilder<LevelPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LevelId.eq(null));
                level_LevelPlayerListQuery = queryBuilder.build();
            }
        }
        Query<LevelPlayer> query = level_LevelPlayerListQuery.forCurrentThread();
        query.setParameter(0, levelId);
        return query.list();
    }

    /** Internal query to resolve the "levelPlayerList" to-many relationship of Player. */
    public List<LevelPlayer> _queryPlayer_LevelPlayerList(long playerId) {
        synchronized (this) {
            if (player_LevelPlayerListQuery == null) {
                QueryBuilder<LevelPlayer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayerId.eq(null));
                player_LevelPlayerListQuery = queryBuilder.build();
            }
        }
        Query<LevelPlayer> query = player_LevelPlayerListQuery.forCurrentThread();
        query.setParameter(0, playerId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getLevelDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getPlayerDao().getAllColumns());
            builder.append(" FROM LEVEL_PLAYER T");
            builder.append(" LEFT JOIN LEVEL T0 ON T.'LEVEL_ID'=T0.'_id'");
            builder.append(" LEFT JOIN PLAYER T1 ON T.'PLAYER_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LevelPlayer loadCurrentDeep(Cursor cursor, boolean lock) {
        LevelPlayer entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Level level = loadCurrentOther(daoSession.getLevelDao(), cursor, offset);
         if(level != null) {
            entity.setLevel(level);
        }
        offset += daoSession.getLevelDao().getAllColumns().length;

        Player player = loadCurrentOther(daoSession.getPlayerDao(), cursor, offset);
         if(player != null) {
            entity.setPlayer(player);
        }

        return entity;    
    }

    public LevelPlayer loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LevelPlayer> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LevelPlayer> list = new ArrayList<LevelPlayer>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LevelPlayer> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LevelPlayer> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
