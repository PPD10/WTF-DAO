package com.wtf.models;

import com.wtf.dao.DaoSession;
import com.wtf.dao.LevelDao;
import com.wtf.dao.LevelPlayerDao;
import com.wtf.dao.PlayerDao;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LEVEL_PLAYER.
 */
public class LevelPlayer {

    private long levelId;
    private long playerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LevelPlayerDao myDao;

    private Level level;
    private Long level__resolvedKey;

    private Player player;
    private Long player__resolvedKey;


    public LevelPlayer() {
    	
    }

    public LevelPlayer(long levelId, long playerId) {
        this.levelId = levelId;
        this.playerId = playerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLevelPlayerDao() : null;
    }

    public long getLevelId() {
        return levelId;
    }

    public void setLevelId(long levelId) {
        this.levelId = levelId;
    }

    public long getPlayerId() {
        return playerId;
    }

    public void setPlayerId(long playerId) {
        this.playerId = playerId;
    }

    /** To-one relationship, resolved on first access. */
    public Level getLevel() {
        long __key = this.levelId;
        if (level__resolvedKey == null || !level__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LevelDao targetDao = daoSession.getLevelDao();
            Level levelNew = targetDao.load(__key);
            synchronized (this) {
                level = levelNew;
            	level__resolvedKey = __key;
            }
        }
        return level;
    }

    public void setLevel(Level level) {
        if (level == null) {
            throw new DaoException("To-one property 'levelId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.level = level;
            levelId = level.getId();
            level__resolvedKey = levelId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Player getPlayer() {
        long __key = this.playerId;
        if (player__resolvedKey == null || !player__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerDao targetDao = daoSession.getPlayerDao();
            Player playerNew = targetDao.load(__key);
            synchronized (this) {
                player = playerNew;
            	player__resolvedKey = __key;
            }
        }
        return player;
    }

    public void setPlayer(Player player) {
        if (player == null) {
            throw new DaoException("To-one property 'playerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.player = player;
            playerId = player.getId();
            player__resolvedKey = playerId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
